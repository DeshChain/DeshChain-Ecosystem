name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: 1.21.x
  DOCKER_BUILDKIT: 1

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=10m

    - name: Format check
      run: |
        make format
        git diff --exit-code

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, race]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run tests
      run: make test-${{ matrix.test-type }}
      env:
        CGO_ENABLED: 1

    - name: Upload coverage to Codecov
      if: matrix.test-type == 'unit'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Build binary
      run: make build

    - name: Test binary
      run: ./bin/deshchaind version

    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: deshchaind-${{ github.sha }}
        path: bin/deshchaind

  docker:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: deshchain/deshchain
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  simulation:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Download binary
      uses: actions/download-artifact@v3
      with:
        name: deshchaind-${{ github.sha }}
        path: bin/
    
    - name: Make binary executable
      run: chmod +x bin/deshchaind
    
    - name: Run simulation tests
      run: make test-sim
      timeout-minutes: 30
    
    - name: Upload simulation results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: simulation-results-${{ github.sha }}
        path: simulation-results/

  deploy-testnet:
    runs-on: ubuntu-latest
    needs: [build, docker, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: testnet
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to testnet
      run: |
        echo "Deploying to testnet environment"
        # Add actual deployment commands here
        # This could involve:
        # - SSH to testnet servers
        # - Update Docker containers
        # - Run database migrations
        # - Health checks
    
    - name: Health check
      run: |
        sleep 30  # Wait for deployment
        curl -f https://testnet-api.deshchain.network/health
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: 'Testnet deployment ${{ job.status }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  deploy-mainnet:
    runs-on: ubuntu-latest
    needs: [build, docker, security, simulation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: mainnet
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Manual approval required
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: ${{ secrets.MAINNET_APPROVERS }}
        minimum-approvals: 2
        issue-title: "Deploy DeshChain to Mainnet"
        issue-body: |
          Please review the deployment to mainnet:
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref }}
          - Author: ${{ github.actor }}
          
          All tests have passed and security scans are clean.
    
    - name: Deploy to mainnet
      run: |
        echo "Deploying to mainnet environment"
        # Add actual deployment commands here
        # This should be more conservative than testnet
    
    - name: Health check
      run: |
        sleep 60  # Wait longer for mainnet
        curl -f https://api.deshchain.network/health
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: 'Mainnet deployment ${{ job.status }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}