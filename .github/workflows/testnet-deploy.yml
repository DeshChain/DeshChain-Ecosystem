name: DeshChain Testnet Deployment

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'x/**'
      - 'app/**'
      - 'cmd/**'
      - 'k8s/**'
      - 'Dockerfile'
      - 'go.mod'
      - 'go.sum'
  pull_request:
    branches:
      - main
    paths:
      - 'x/**'
      - 'app/**'
      - 'cmd/**'
      - 'k8s/**'
      - 'Dockerfile'
      - 'go.mod'
      - 'go.sum'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'testnet'
        type: choice
        options:
          - testnet
          - staging
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: deshchain/node
  HELM_CHART_NAME: deshchain-testnet
  KUBERNETES_NAMESPACE: default

jobs:
  # Security scanning and vulnerability assessment
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ./...'

      - name: Upload Gosec scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'gosec-results.sarif'

  # Build and test the DeshChain binary
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        go-version: [1.21.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run go vet
        run: go vet ./...

      - name: Run staticcheck
        uses: dominikh/staticcheck-action@v1.3.0
        with:
          version: "2023.1.6"

      - name: Run unit tests
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Build DeshChain binary
        run: |
          make build
          
      - name: Verify binary
        run: |
          ./build/deshchaind version
          ./build/deshchaind --help

      - name: Run integration tests
        run: |
          make test-integration

  # Build and push Docker images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=testnet-v1.0.0,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.sha }}
            COMMIT=${{ github.sha }}
            BUILD_DATE=${{ steps.meta.outputs.labels }}

      - name: Sign container image
        uses: sigstore/cosign-installer@v3
      
      - name: Sign the published Docker image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

  # Deploy to testnet environment
  deploy-testnet:
    name: Deploy to Testnet
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: 
      name: testnet
      url: https://testnet.deshchain.com
    permissions:
      contents: read
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: '1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Configure kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name deshchain-testnet-cluster

      - name: Add Helm repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.KUBERNETES_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy PostgreSQL
        run: |
          helm upgrade --install postgresql bitnami/postgresql \
            --namespace ${{ env.KUBERNETES_NAMESPACE }} \
            --set auth.postgresPassword="${{ secrets.POSTGRES_PASSWORD }}" \
            --set auth.username="deshchain" \
            --set auth.password="${{ secrets.POSTGRES_PASSWORD }}" \
            --set auth.database="deshchain_explorer" \
            --set primary.persistence.storageClass="gp3-ssd" \
            --set primary.persistence.size="200Gi" \
            --timeout 600s \
            --wait

      - name: Deploy Redis
        run: |
          helm upgrade --install redis bitnami/redis \
            --namespace ${{ env.KUBERNETES_NAMESPACE }} \
            --set auth.password="${{ secrets.REDIS_PASSWORD }}" \
            --set master.persistence.storageClass="gp3-ssd" \
            --set master.persistence.size="10Gi" \
            --timeout 600s \
            --wait

      - name: Create validator keys secret
        run: |
          kubectl create secret generic deshchain-testnet-validator-keys \
            --from-literal=priv_validator_key.json="${{ secrets.VALIDATOR_PRIVATE_KEY }}" \
            --namespace ${{ env.KUBERNETES_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create faucet keys secret
        run: |
          kubectl create secret generic deshchain-testnet-faucet-keys \
            --from-literal=mnemonic="${{ secrets.FAUCET_MNEMONIC }}" \
            --namespace ${{ env.KUBERNETES_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy DeshChain Testnet
        run: |
          helm upgrade --install ${{ env.HELM_CHART_NAME }} ./k8s/helm/deshchain-testnet \
            --namespace ${{ env.KUBERNETES_NAMESPACE }} \
            --set deshchain.image.tag="testnet-v1.0.0" \
            --set postgresql.auth.password="${{ secrets.POSTGRES_PASSWORD }}" \
            --set redis.auth.password="${{ secrets.REDIS_PASSWORD }}" \
            --set ingress.hosts[0].host="testnet.deshchain.com" \
            --set ingress.hosts[1].host="testnet-api.deshchain.com" \
            --set ingress.hosts[2].host="testnet-rpc.deshchain.com" \
            --set ingress.hosts[3].host="explorer.testnet.deshchain.com" \
            --set ingress.hosts[4].host="faucet.testnet.deshchain.com" \
            --timeout 900s \
            --wait

      - name: Verify deployment
        run: |
          kubectl rollout status statefulset/deshchain-testnet-validator -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=600s
          kubectl rollout status deployment/deshchain-testnet-sentry -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=600s
          kubectl rollout status deployment/deshchain-testnet-frontend -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=600s
          kubectl rollout status deployment/deshchain-testnet-explorer -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=600s
          kubectl rollout status deployment/deshchain-testnet-faucet -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=600s

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=validator -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=300s
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=sentry -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=300s
          
          # Test RPC endpoint
          kubectl port-forward svc/deshchain-testnet-sentry 26657:26657 -n ${{ env.KUBERNETES_NAMESPACE }} &
          sleep 10
          
          # Check node status
          curl -s http://localhost:26657/status | jq '.result.node_info.network' | grep -q "deshchain-testnet-1"
          
          # Check latest block
          LATEST_BLOCK=$(curl -s http://localhost:26657/status | jq '.result.sync_info.latest_block_height' | tr -d '"')
          if [ "$LATEST_BLOCK" -gt "0" ]; then
            echo "✅ Blockchain is producing blocks. Latest block: $LATEST_BLOCK"
          else
            echo "❌ Blockchain is not producing blocks"
            exit 1
          fi
          
          # Kill port-forward
          pkill -f "kubectl port-forward" || true

      - name: Update deployment status
        if: success()
        run: |
          # Create deployment annotation
          kubectl annotate deployment deshchain-testnet-sentry \
            deployment.kubernetes.io/revision="$(date +%s)" \
            deployment.kubernetes.io/deployed-by="${{ github.actor }}" \
            deployment.kubernetes.io/git-commit="${{ github.sha }}" \
            deployment.kubernetes.io/workflow-run="${{ github.run_id }}" \
            -n ${{ env.KUBERNETES_NAMESPACE }} --overwrite

  # Deploy monitoring stack
  deploy-monitoring:
    name: Deploy Monitoring
    runs-on: ubuntu-latest
    needs: deploy-testnet
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Configure kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name deshchain-testnet-cluster

      - name: Run monitoring setup
        run: |
          cd k8s/monitoring
          chmod +x setup-monitoring.sh
          ./setup-monitoring.sh

  # Notify on deployment completion
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-testnet, deploy-monitoring]
    if: always()
    steps:
      - name: Notify Slack on Success
        if: needs.deploy-testnet.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            ✅ DeshChain Testnet Deployment Successful!
            
            🔗 Frontend: https://testnet.deshchain.com
            🔗 Explorer: https://explorer.testnet.deshchain.com
            🔗 Faucet: https://faucet.testnet.deshchain.com
            🔗 Monitoring: https://monitoring.testnet.deshchain.com
            
            📊 Commit: ${{ github.sha }}
            👤 Deployed by: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: needs.deploy-testnet.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            ❌ DeshChain Testnet Deployment Failed!
            
            Please check the GitHub Actions logs for details.
            
            📊 Commit: ${{ github.sha }}
            👤 Attempted by: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub Release
        if: needs.deploy-testnet.result == 'success' && github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: testnet-v1.0.${{ github.run_number }}
          release_name: DeshChain Testnet Release v1.0.${{ github.run_number }}
          body: |
            ## DeshChain Testnet Release v1.0.${{ github.run_number }}
            
            ### 🚀 Deployment Information
            - **Environment**: Testnet
            - **Commit**: ${{ github.sha }}
            - **Deployed by**: ${{ github.actor }}
            - **Deployment Date**: ${{ steps.date.outputs.date }}
            
            ### 🔗 Access URLs
            - [Frontend](https://testnet.deshchain.com)
            - [API](https://testnet-api.deshchain.com)
            - [RPC](https://testnet-rpc.deshchain.com)
            - [Explorer](https://explorer.testnet.deshchain.com)
            - [Faucet](https://faucet.testnet.deshchain.com)
            - [Monitoring](https://monitoring.testnet.deshchain.com)
            
            ### 📋 Features Included
            - ✅ Validator referral system with anti-gaming measures
            - ✅ USD-pegged staking mechanism
            - ✅ Automatic token launches on Sikkebaaz
            - ✅ Comprehensive monitoring and alerting
            - ✅ IPFS integration for cultural content
            - ✅ Multi-tier commission structure
            - ✅ Advanced analytics dashboards
            
            ### 🛡️ Security
            - ✅ Container image signed with Cosign
            - ✅ Vulnerability scanning with Trivy
            - ✅ Static analysis with Gosec
            - ✅ Network policies implemented
            - ✅ RBAC configured
            
            For support or issues, please contact the DeshChain team.
          draft: false
          prerelease: false