syntax = "proto3";

package deshchain.gramsuraksha.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "amino/amino.proto";

option go_package = "github.com/deshchain/deshchain/x/grampension/types";

// GramSurakshaScheme defines the overall pension scheme parameters
message GramSurakshaScheme {
  // scheme_id is the unique identifier for this scheme
  string scheme_id = 1;

  // scheme_name is the human-readable name
  string scheme_name = 2;

  // monthly_contribution is the required monthly contribution (1000 INR worth of NAMO)
  cosmos.base.v1beta1.Coin monthly_contribution = 3 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // contribution_period is the number of months user must contribute (12 months)
  uint32 contribution_period = 4;

  // maturity_bonus is the bonus amount paid at maturity (6000 INR worth of NAMO)
  cosmos.base.v1beta1.Coin maturity_bonus = 5 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // total_payout is the total amount user receives at maturity (18000 INR worth of NAMO)
  cosmos.base.v1beta1.Coin total_payout = 6 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // active indicates if the scheme is currently active
  bool active = 7;

  // created_at is the timestamp when scheme was created
  int64 created_at = 8;

  // updated_at is the timestamp when scheme was last updated
  int64 updated_at = 9;

  // minimum_age is the minimum age to participate
  uint32 minimum_age = 10;

  // maximum_age is the maximum age to participate
  uint32 maximum_age = 11;

  // kyc_required indicates if KYC is required for participation
  bool kyc_required = 12;

  // scheme_description is a detailed description of the scheme
  string scheme_description = 13;

  // terms_and_conditions contains the T&C for the scheme
  string terms_and_conditions = 14;

  // risk_disclaimer contains risk disclosure information
  string risk_disclaimer = 15;

  // early_withdrawal_penalty is the penalty for early withdrawal
  string early_withdrawal_penalty = 16;

  // late_payment_penalty is the penalty for late payments
  string late_payment_penalty = 17;

  // grace_period_days is the grace period for late payments
  uint32 grace_period_days = 18;

  // maximum_participants is the maximum number of participants allowed
  uint64 maximum_participants = 19;

  // current_participants is the current number of active participants
  uint64 current_participants = 20;

  // total_fund_allocated is the total fund allocated for this scheme
  cosmos.base.v1beta1.Coin total_fund_allocated = 21 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // fund_utilization is the current fund utilization
  cosmos.base.v1beta1.Coin fund_utilization = 22 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// GramSurakshaParticipant defines a participant in the pension scheme
message GramSurakshaParticipant {
  // participant_id is the unique identifier for this participant
  string participant_id = 1;

  // address is the participant's wallet address
  string address = 2;

  // scheme_id is the ID of the scheme they're participating in
  string scheme_id = 3;

  // enrollment_date is when they enrolled
  int64 enrollment_date = 4;

  // contributions is the list of monthly contributions made
  repeated MonthlyContribution contributions = 5;

  // total_contributed is the total amount contributed so far
  cosmos.base.v1beta1.Coin total_contributed = 6 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // months_completed is the number of months they've successfully contributed
  uint32 months_completed = 7;

  // status is the current status of the participant
  ParticipantStatus status = 8;

  // next_payment_due is the timestamp for next payment
  int64 next_payment_due = 9;

  // maturity_date is when they will receive the full payout
  int64 maturity_date = 10;

  // kyc_status is the KYC verification status
  KYCStatus kyc_status = 11;

  // personal_details contains participant's personal information
  PersonalDetails personal_details = 12;

  // nominee_details contains nominee information
  NomineeDetails nominee_details = 13;

  // penalty_amount is any penalty amount due
  cosmos.base.v1beta1.Coin penalty_amount = 14 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // grace_period_used indicates if grace period was used
  bool grace_period_used = 15;

  // last_payment_date is the timestamp of last payment
  int64 last_payment_date = 16;

  // performance_score is the participant's performance score (0-100)
  uint32 performance_score = 17;

  // referral_code is the participant's referral code
  string referral_code = 18;

  // referred_by is the address who referred this participant
  string referred_by = 19;

  // referral_bonus_earned is the referral bonus earned
  cosmos.base.v1beta1.Coin referral_bonus_earned = 20 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // auto_renewal_enabled indicates if auto-renewal is enabled
  bool auto_renewal_enabled = 21;

  // notification_preferences contains notification settings
  map<string, string> notification_preferences = 22;

  // payment_history contains detailed payment history
  repeated PaymentRecord payment_history = 23;

  // withdrawal_requests contains any withdrawal requests
  repeated WithdrawalRequest withdrawal_requests = 24;

  // loyalty_points earned through the scheme
  uint64 loyalty_points = 25;

  // cultural_engagement_score based on cultural activities
  uint32 cultural_engagement_score = 26;

  // patriotism_score from other DeshChain activities
  uint32 patriotism_score = 27;

  // additional_benefits earned through engagement
  repeated string additional_benefits = 28;

  // risk_profile assessment
  string risk_profile = 29;

  // investment_preferences for future schemes
  map<string, string> investment_preferences = 30;
}

// MonthlyContribution represents a single monthly contribution
message MonthlyContribution {
  // month is the month number (1-12)
  uint32 month = 1;

  // amount is the contribution amount
  cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // transaction_hash is the hash of the contribution transaction
  string transaction_hash = 3;

  // payment_date is when the payment was made
  int64 payment_date = 4;

  // due_date is when the payment was due
  int64 due_date = 5;

  // status is the payment status
  PaymentStatus status = 6;

  // cultural_quote_id is the cultural quote shown during payment
  uint64 cultural_quote_id = 7;

  // patriotism_score_earned is the patriotism score earned from this payment
  uint32 patriotism_score_earned = 8;

  // on_time_bonus if payment was made on time
  cosmos.base.v1beta1.Coin on_time_bonus = 9 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // penalty_applied if payment was late
  cosmos.base.v1beta1.Coin penalty_applied = 10 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // receipt_hash is the hash of the payment receipt
  string receipt_hash = 11;

  // confirmation_block is the block number where payment was confirmed
  int64 confirmation_block = 12;

  // gas_fee is the gas fee paid for this transaction
  cosmos.base.v1beta1.Coin gas_fee = 13 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // remarks for this contribution
  string remarks = 14;
}

// PaymentRecord represents a detailed payment record
message PaymentRecord {
  // record_id is the unique identifier for this record
  string record_id = 1;

  // transaction_hash is the transaction hash
  string transaction_hash = 2;

  // amount is the payment amount
  cosmos.base.v1beta1.Coin amount = 3 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // timestamp is when the payment was made
  int64 timestamp = 4;

  // payment_method used for the payment
  string payment_method = 5;

  // status of the payment
  PaymentStatus status = 6;

  // block_height where payment was recorded
  int64 block_height = 7;

  // confirmation_count number of confirmations
  uint32 confirmation_count = 8;

  // fee_paid for this transaction
  cosmos.base.v1beta1.Coin fee_paid = 9 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // exchange_rate at the time of payment (INR to NAMO)
  string exchange_rate = 10;

  // metadata for additional information
  map<string, string> metadata = 11;
}

// WithdrawalRequest represents a withdrawal request
message WithdrawalRequest {
  // request_id is the unique identifier for this request
  string request_id = 1;

  // amount requested for withdrawal
  cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // request_date is when the request was made
  int64 request_date = 3;

  // reason for withdrawal
  string reason = 4;

  // status of the withdrawal request
  WithdrawalStatus status = 5;

  // penalty_amount for early withdrawal
  cosmos.base.v1beta1.Coin penalty_amount = 6 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // processing_date is when the request was processed
  int64 processing_date = 7;

  // approval_authority who approved the request
  string approval_authority = 8;

  // supporting_documents for the withdrawal
  repeated string supporting_documents = 9;

  // net_amount after penalties
  cosmos.base.v1beta1.Coin net_amount = 10 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // processing_fee for the withdrawal
  cosmos.base.v1beta1.Coin processing_fee = 11 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // remarks for the withdrawal
  string remarks = 12;
}

// PersonalDetails contains participant's personal information
message PersonalDetails {
  // full_name of the participant
  string full_name = 1;

  // date_of_birth in YYYY-MM-DD format
  string date_of_birth = 2;

  // gender of the participant
  string gender = 3;

  // phone_number for contact
  string phone_number = 4;

  // email_address for communication
  string email_address = 5;

  // address for correspondence
  string address = 6;

  // city of residence
  string city = 7;

  // state of residence
  string state = 8;

  // pin_code of residence
  string pin_code = 9;

  // country of residence
  string country = 10;

  // occupation of the participant
  string occupation = 11;

  // annual_income of the participant
  string annual_income = 12;

  // pan_number for tax purposes
  string pan_number = 13;

  // aadhaar_number for identity verification
  string aadhaar_number = 14;

  // bank_account_number for payouts
  string bank_account_number = 15;

  // ifsc_code for bank transfer
  string ifsc_code = 16;

  // emergency_contact information
  string emergency_contact = 17;

  // emergency_phone emergency contact number
  string emergency_phone = 18;

  // marital_status of the participant
  string marital_status = 19;

  // number_of_dependents
  uint32 number_of_dependents = 20;
}

// NomineeDetails contains nominee information
message NomineeDetails {
  // nominee_name full name of the nominee
  string nominee_name = 1;

  // relationship with the participant
  string relationship = 2;

  // date_of_birth of the nominee
  string date_of_birth = 3;

  // phone_number of the nominee
  string phone_number = 4;

  // address of the nominee
  string address = 5;

  // share_percentage of the nominee (0-100)
  uint32 share_percentage = 6;

  // pan_number of the nominee
  string pan_number = 7;

  // aadhaar_number of the nominee
  string aadhaar_number = 8;

  // bank_account_number of the nominee
  string bank_account_number = 9;

  // ifsc_code of the nominee
  string ifsc_code = 10;

  // guardian_name if nominee is minor
  string guardian_name = 11;

  // guardian_relationship with the nominee
  string guardian_relationship = 12;

  // guardian_pan_number
  string guardian_pan_number = 13;

  // guardian_aadhaar_number
  string guardian_aadhaar_number = 14;

  // consent_given indicates if nominee has given consent
  bool consent_given = 15;

  // consent_date when consent was given
  int64 consent_date = 16;

  // witness_name for the nomination
  string witness_name = 17;

  // witness_signature hash of witness signature
  string witness_signature = 18;
}

// GramPensionStats contains overall statistics
message GramPensionStats {
  // total_participants across all schemes
  uint64 total_participants = 1;

  // active_participants currently participating
  uint64 active_participants = 2;

  // matured_participants who have completed the scheme
  uint64 matured_participants = 3;

  // total_contributions_received
  cosmos.base.v1beta1.Coin total_contributions_received = 4 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // total_payouts_made
  cosmos.base.v1beta1.Coin total_payouts_made = 5 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // total_bonus_paid
  cosmos.base.v1beta1.Coin total_bonus_paid = 6 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // scheme_sustainability_ratio (contributions vs payouts)
  string scheme_sustainability_ratio = 7;

  // average_performance_score across all participants
  string average_performance_score = 8;

  // total_penalties_collected
  cosmos.base.v1beta1.Coin total_penalties_collected = 9 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // fund_utilization_percentage
  string fund_utilization_percentage = 10;

  // projected_liabilities for next 12 months
  cosmos.base.v1beta1.Coin projected_liabilities = 11 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // available_reserves for scheme payouts
  cosmos.base.v1beta1.Coin available_reserves = 12 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // risk_assessment for the scheme
  string risk_assessment = 13;

  // sustainability_score (0-100)
  uint32 sustainability_score = 14;

  // last_updated timestamp
  int64 last_updated = 15;
}

// Enums for various statuses
enum ParticipantStatus {
  PARTICIPANT_STATUS_UNSPECIFIED = 0;
  PARTICIPANT_STATUS_ACTIVE = 1;
  PARTICIPANT_STATUS_SUSPENDED = 2;
  PARTICIPANT_STATUS_MATURED = 3;
  PARTICIPANT_STATUS_WITHDRAWN = 4;
  PARTICIPANT_STATUS_DEFAULTED = 5;
  PARTICIPANT_STATUS_GRACE_PERIOD = 6;
  PARTICIPANT_STATUS_PENDING_KYC = 7;
  PARTICIPANT_STATUS_KYC_REJECTED = 8;
  PARTICIPANT_STATUS_BLOCKED = 9;
  PARTICIPANT_STATUS_INACTIVE = 10;
}

enum PaymentStatus {
  PAYMENT_STATUS_UNSPECIFIED = 0;
  PAYMENT_STATUS_PENDING = 1;
  PAYMENT_STATUS_CONFIRMED = 2;
  PAYMENT_STATUS_FAILED = 3;
  PAYMENT_STATUS_CANCELLED = 4;
  PAYMENT_STATUS_REFUNDED = 5;
  PAYMENT_STATUS_PROCESSING = 6;
  PAYMENT_STATUS_OVERDUE = 7;
  PAYMENT_STATUS_GRACE_PERIOD = 8;
  PAYMENT_STATUS_PENALTY_APPLIED = 9;
  PAYMENT_STATUS_BONUS_APPLIED = 10;
}

enum WithdrawalStatus {
  WITHDRAWAL_STATUS_UNSPECIFIED = 0;
  WITHDRAWAL_STATUS_REQUESTED = 1;
  WITHDRAWAL_STATUS_PROCESSING = 2;
  WITHDRAWAL_STATUS_APPROVED = 3;
  WITHDRAWAL_STATUS_REJECTED = 4;
  WITHDRAWAL_STATUS_COMPLETED = 5;
  WITHDRAWAL_STATUS_CANCELLED = 6;
  WITHDRAWAL_STATUS_PENDING_APPROVAL = 7;
  WITHDRAWAL_STATUS_PENDING_DOCUMENTS = 8;
  WITHDRAWAL_STATUS_PENALTY_CALCULATED = 9;
  WITHDRAWAL_STATUS_REFUND_PROCESSING = 10;
}

enum KYCStatus {
  KYC_STATUS_UNSPECIFIED = 0;
  KYC_STATUS_PENDING = 1;
  KYC_STATUS_APPROVED = 2;
  KYC_STATUS_REJECTED = 3;
  KYC_STATUS_EXPIRED = 4;
  KYC_STATUS_UNDER_REVIEW = 5;
  KYC_STATUS_DOCUMENTS_REQUIRED = 6;
  KYC_STATUS_VERIFICATION_PENDING = 7;
  KYC_STATUS_CONDITIONALLY_APPROVED = 8;
  KYC_STATUS_SUSPENDED = 9;
  KYC_STATUS_RESUBMISSION_REQUIRED = 10;
}