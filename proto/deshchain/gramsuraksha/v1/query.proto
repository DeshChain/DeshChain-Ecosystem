syntax = "proto3";

package deshchain.gramsuraksha.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "deshchain.gramsuraksha/v1/grampension.proto";
import "deshchain.gramsuraksha/v1/tx.proto";

option go_package = "github.com/deshchain/deshchain/x/grampension/types";

// Query defines the gRPC querier service for gram pension module
service Query {
  // Params queries the parameters of the gram pension module
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/params";
  }

  // SurakshaScheme queries details of a specific pension scheme
  rpc SurakshaScheme(QuerySurakshaSchemeRequest) returns (QuerySurakshaSchemeResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/scheme/{scheme_id}";
  }

  // SurakshaSchemes queries all pension schemes
  rpc SurakshaSchemes(QuerySurakshaSchemesRequest) returns (QuerySurakshaSchemesResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/schemes";
  }

  // Participant queries details of a specific participant
  rpc Participant(QueryParticipantRequest) returns (QueryParticipantResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/participant/{participant_id}";
  }

  // ParticipantsByScheme queries all participants of a specific scheme
  rpc ParticipantsByScheme(QueryParticipantsBySchemeRequest) returns (QueryParticipantsBySchemeResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/scheme/{scheme_id}/participants";
  }

  // ParticipantsByAddress queries all participations of a specific address
  rpc ParticipantsByAddress(QueryParticipantsByAddressRequest) returns (QueryParticipantsByAddressResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/address/{address}/participations";
  }

  // ContributionHistory queries contribution history of a participant
  rpc ContributionHistory(QueryContributionHistoryRequest) returns (QueryContributionHistoryResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/participant/{participant_id}/contributions";
  }

  // MaturityCalculation calculates maturity amount for a participant
  rpc MaturityCalculation(QueryMaturityCalculationRequest) returns (QueryMaturityCalculationResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/participant/{participant_id}/maturity";
  }

  // EarlyWithdrawalCalculation calculates early withdrawal amount and penalty
  rpc EarlyWithdrawalCalculation(QueryEarlyWithdrawalCalculationRequest) returns (QueryEarlyWithdrawalCalculationResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/participant/{participant_id}/early_withdrawal";
  }

  // PensionStats queries overall pension statistics
  rpc PensionStats(QuerySurakshaStatsRequest) returns (QuerySurakshaStatsResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/stats";
  }

  // SchemeStats queries statistics for a specific scheme
  rpc SchemeStats(QuerySchemeStatsRequest) returns (QuerySchemeStatsResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/scheme/{scheme_id}/stats";
  }

  // ParticipantPerformance queries performance metrics of a participant
  rpc ParticipantPerformance(QueryParticipantPerformanceRequest) returns (QueryParticipantPerformanceResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/participant/{participant_id}/performance";
  }

  // ReferralRewards queries referral rewards for an address
  rpc ReferralRewards(QueryReferralRewardsRequest) returns (QueryReferralRewardsResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/address/{address}/referral_rewards";
  }

  // SustainabilityReport queries sustainability report for all schemes
  rpc SustainabilityReport(QuerySustainabilityReportRequest) returns (QuerySustainabilityReportResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/sustainability_report";
  }

  // MaturityProjections queries maturity projections for upcoming months
  rpc MaturityProjections(QueryMaturityProjectionsRequest) returns (QueryMaturityProjectionsResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/maturity_projections";
  }

  // WithdrawalRequests queries withdrawal requests for a participant or all
  rpc WithdrawalRequests(QueryWithdrawalRequestsRequest) returns (QueryWithdrawalRequestsResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/withdrawal_requests";
  }

  // KYCStatus queries KYC status of a participant
  rpc KYCStatus(QueryKYCStatusRequest) returns (QueryKYCStatusResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/participant/{participant_id}/kyc_status";
  }

  // PenaltyCalculation calculates penalty for late payments
  rpc PenaltyCalculation(QueryPenaltyCalculationRequest) returns (QueryPenaltyCalculationResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/participant/{participant_id}/penalty";
  }

  // FundUtilization queries fund utilization across all schemes
  rpc FundUtilization(QueryFundUtilizationRequest) returns (QueryFundUtilizationResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/fund_utilization";
  }

  // RiskAssessment queries risk assessment for schemes
  rpc RiskAssessment(QueryRiskAssessmentRequest) returns (QueryRiskAssessmentResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/risk_assessment";
  }

  // LoyaltyProgram queries loyalty program details for a participant
  rpc LoyaltyProgram(QueryLoyaltyProgramRequest) returns (QueryLoyaltyProgramResponse) {
    option (google.api.http).get = "/deshchain.gramsuraksha/v1/participant/{participant_id}/loyalty";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method
message QueryParamsResponse {
  // params holds all the parameters of this module
  GramPensionParams params = 1 [
    (gogoproto.nullable) = false
  ];
}

// QuerySurakshaSchemeRequest is request type for the Query/SurakshaScheme RPC method
message QuerySurakshaSchemeRequest {
  // scheme_id is the ID of the pension scheme
  string scheme_id = 1;
}

// QuerySurakshaSchemeResponse is response type for the Query/SurakshaScheme RPC method
message QuerySurakshaSchemeResponse {
  // scheme contains the pension scheme details
  GramSurakshaScheme scheme = 1 [
    (gogoproto.nullable) = false
  ];

  // scheme_statistics contains current statistics
  SchemeStatistics scheme_statistics = 2 [
    (gogoproto.nullable) = false
  ];

  // fund_health contains fund health metrics
  FundHealth fund_health = 3 [
    (gogoproto.nullable) = false
  ];
}

// QuerySurakshaSchemesRequest is request type for the Query/SurakshaSchemes RPC method
message QuerySurakshaSchemesRequest {
  // pagination defines an optional pagination for the request
  cosmos.base.query.v1beta1.PageRequest pagination = 1;

  // status filters schemes by status
  string status = 2;

  // active filters only active schemes
  bool active = 3;
}

// QuerySurakshaSchemesResponse is response type for the Query/SurakshaSchemes RPC method
message QuerySurakshaSchemesResponse {
  // schemes contains all pension schemes
  repeated GramSurakshaScheme schemes = 1 [
    (gogoproto.nullable) = false
  ];

  // pagination defines the pagination in the response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;

  // total_fund_allocated across all schemes
  cosmos.base.v1beta1.Coin total_fund_allocated = 3 [
    (gogoproto.nullable) = false
  ];

  // total_participants across all schemes
  uint64 total_participants = 4;
}

// QueryParticipantRequest is request type for the Query/Participant RPC method
message QueryParticipantRequest {
  // participant_id is the ID of the participant
  string participant_id = 1;
}

// QueryParticipantResponse is response type for the Query/Participant RPC method
message QueryParticipantResponse {
  // participant contains the participant details
  GramSurakshaParticipant participant = 1 [
    (gogoproto.nullable) = false
  ];

  // scheme_info contains related scheme information
  GramSurakshaScheme scheme_info = 2 [
    (gogoproto.nullable) = false
  ];

  // projected_maturity contains maturity projections
  MaturityProjection projected_maturity = 3 [
    (gogoproto.nullable) = false
  ];

  // performance_metrics contains performance data
  PerformanceMetrics performance_metrics = 4 [
    (gogoproto.nullable) = false
  ];
}

// QueryParticipantsBySchemeRequest is request type for the Query/ParticipantsByScheme RPC method
message QueryParticipantsBySchemeRequest {
  // scheme_id is the ID of the pension scheme
  string scheme_id = 1;

  // pagination defines an optional pagination for the request
  cosmos.base.query.v1beta1.PageRequest pagination = 2;

  // status filters participants by status
  ParticipantStatus status = 3;

  // sort_by defines the sorting criteria
  string sort_by = 4;

  // sort_order defines the sorting order (asc, desc)
  string sort_order = 5;
}

// QueryParticipantsBySchemeResponse is response type for the Query/ParticipantsByScheme RPC method
message QueryParticipantsBySchemeResponse {
  // participants contains all participants of the scheme
  repeated GramSurakshaParticipant participants = 1 [
    (gogoproto.nullable) = false
  ];

  // pagination defines the pagination in the response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;

  // scheme_summary contains scheme summary
  SchemeSummary scheme_summary = 3 [
    (gogoproto.nullable) = false
  ];
}

// QueryParticipantsByAddressRequest is request type for the Query/ParticipantsByAddress RPC method
message QueryParticipantsByAddressRequest {
  // address is the participant's address
  string address = 1;

  // pagination defines an optional pagination for the request
  cosmos.base.query.v1beta1.PageRequest pagination = 2;

  // include_history includes historical participations
  bool include_history = 3;
}

// QueryParticipantsByAddressResponse is response type for the Query/ParticipantsByAddress RPC method
message QueryParticipantsByAddressResponse {
  // participations contains all participations of the address
  repeated GramSurakshaParticipant participations = 1 [
    (gogoproto.nullable) = false
  ];

  // pagination defines the pagination in the response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;

  // total_contributed across all participations
  cosmos.base.v1beta1.Coin total_contributed = 3 [
    (gogoproto.nullable) = false
  ];

  // total_matured_amount from completed schemes
  cosmos.base.v1beta1.Coin total_matured_amount = 4 [
    (gogoproto.nullable) = false
  ];

  // active_participations_count
  uint32 active_participations_count = 5;

  // overall_performance_score
  uint32 overall_performance_score = 6;
}

// QueryContributionHistoryRequest is request type for the Query/ContributionHistory RPC method
message QueryContributionHistoryRequest {
  // participant_id is the ID of the participant
  string participant_id = 1;

  // pagination defines an optional pagination for the request
  cosmos.base.query.v1beta1.PageRequest pagination = 2;

  // start_month filters contributions from this month
  uint32 start_month = 3;

  // end_month filters contributions up to this month
  uint32 end_month = 4;
}

// QueryContributionHistoryResponse is response type for the Query/ContributionHistory RPC method
message QueryContributionHistoryResponse {
  // contributions contains the contribution history
  repeated MonthlyContribution contributions = 1 [
    (gogoproto.nullable) = false
  ];

  // pagination defines the pagination in the response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;

  // total_contributed amount
  cosmos.base.v1beta1.Coin total_contributed = 3 [
    (gogoproto.nullable) = false
  ];

  // on_time_contributions_count
  uint32 on_time_contributions_count = 4;

  // late_contributions_count
  uint32 late_contributions_count = 5;

  // total_penalties_paid
  cosmos.base.v1beta1.Coin total_penalties_paid = 6 [
    (gogoproto.nullable) = false
  ];

  // total_bonuses_earned
  cosmos.base.v1beta1.Coin total_bonuses_earned = 7 [
    (gogoproto.nullable) = false
  ];
}

// QueryMaturityCalculationRequest is request type for the Query/MaturityCalculation RPC method
message QueryMaturityCalculationRequest {
  // participant_id is the ID of the participant
  string participant_id = 1;

  // calculation_date is the date for calculation (optional, defaults to current)
  int64 calculation_date = 2;
}

// QueryMaturityCalculationResponse is response type for the Query/MaturityCalculation RPC method
message QueryMaturityCalculationResponse {
  // maturity_projection contains maturity details
  MaturityProjection maturity_projection = 1 [
    (gogoproto.nullable) = false
  ];

  // contribution_breakdown details
  ContributionBreakdown contribution_breakdown = 2 [
    (gogoproto.nullable) = false
  ];

  // bonus_breakdown details
  BonusBreakdown bonus_breakdown = 3 [
    (gogoproto.nullable) = false
  ];
}

// QueryEarlyWithdrawalCalculationRequest is request type for the Query/EarlyWithdrawalCalculation RPC method
message QueryEarlyWithdrawalCalculationRequest {
  // participant_id is the ID of the participant
  string participant_id = 1;

  // withdrawal_amount is the amount to withdraw
  cosmos.base.v1beta1.Coin withdrawal_amount = 2 [
    (gogoproto.nullable) = false
  ];

  // withdrawal_date is the date of withdrawal (optional, defaults to current)
  int64 withdrawal_date = 3;
}

// QueryEarlyWithdrawalCalculationResponse is response type for the Query/EarlyWithdrawalCalculation RPC method
message QueryEarlyWithdrawalCalculationResponse {
  // withdrawal_calculation contains withdrawal details
  WithdrawalCalculation withdrawal_calculation = 1 [
    (gogoproto.nullable) = false
  ];

  // penalty_breakdown details
  PenaltyBreakdown penalty_breakdown = 2 [
    (gogoproto.nullable) = false
  ];

  // alternatives contains alternative options
  repeated string alternatives = 3;
}

// QuerySurakshaStatsRequest is request type for the Query/PensionStats RPC method
message QuerySurakshaStatsRequest {}

// QuerySurakshaStatsResponse is response type for the Query/PensionStats RPC method
message QuerySurakshaStatsResponse {
  // stats contains overall pension statistics
  GramPensionStats stats = 1 [
    (gogoproto.nullable) = false
  ];

  // monthly_trends contains monthly trend data
  repeated MonthlyTrend monthly_trends = 2 [
    (gogoproto.nullable) = false
  ];

  // scheme_performance contains performance by scheme
  repeated SchemePerformance scheme_performance = 3 [
    (gogoproto.nullable) = false
  ];
}

// QuerySchemeStatsRequest is request type for the Query/SchemeStats RPC method
message QuerySchemeStatsRequest {
  // scheme_id is the ID of the pension scheme
  string scheme_id = 1;

  // time_period for statistics (7d, 30d, 90d, 1y, all)
  string time_period = 2;
}

// QuerySchemeStatsResponse is response type for the Query/SchemeStats RPC method
message QuerySchemeStatsResponse {
  // scheme_statistics contains scheme statistics
  SchemeStatistics scheme_statistics = 1 [
    (gogoproto.nullable) = false
  ];

  // participation_trends contains participation trends
  repeated ParticipationTrend participation_trends = 2 [
    (gogoproto.nullable) = false
  ];

  // contribution_trends contains contribution trends
  repeated ContributionTrend contribution_trends = 3 [
    (gogoproto.nullable) = false
  ];
}

// QueryParticipantPerformanceRequest is request type for the Query/ParticipantPerformance RPC method
message QueryParticipantPerformanceRequest {
  // participant_id is the ID of the participant
  string participant_id = 1;
}

// QueryParticipantPerformanceResponse is response type for the Query/ParticipantPerformance RPC method
message QueryParticipantPerformanceResponse {
  // performance_metrics contains performance data
  PerformanceMetrics performance_metrics = 1 [
    (gogoproto.nullable) = false
  ];

  // performance_history contains historical performance
  repeated PerformanceRecord performance_history = 2 [
    (gogoproto.nullable) = false
  ];

  // benchmarks contains benchmark comparisons
  repeated Benchmark benchmarks = 3 [
    (gogoproto.nullable) = false
  ];
}

// QueryReferralRewardsRequest is request type for the Query/ReferralRewards RPC method
message QueryReferralRewardsRequest {
  // address is the referrer's address
  string address = 1;

  // pagination defines an optional pagination for the request
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryReferralRewardsResponse is response type for the Query/ReferralRewards RPC method
message QueryReferralRewardsResponse {
  // referral_rewards contains referral reward details
  repeated ReferralReward referral_rewards = 1 [
    (gogoproto.nullable) = false
  ];

  // pagination defines the pagination in the response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;

  // total_referral_rewards earned
  cosmos.base.v1beta1.Coin total_referral_rewards = 3 [
    (gogoproto.nullable) = false
  ];

  // total_referrals_made
  uint64 total_referrals_made = 4;

  // active_referrals_count
  uint64 active_referrals_count = 5;

  // referrer_level current level
  string referrer_level = 6;
}

// QuerySustainabilityReportRequest is request type for the Query/SustainabilityReport RPC method
message QuerySustainabilityReportRequest {
  // report_period for the report (monthly, quarterly, yearly)
  string report_period = 1;

  // include_projections includes future projections
  bool include_projections = 2;
}

// QuerySustainabilityReportResponse is response type for the Query/SustainabilityReport RPC method
message QuerySustainabilityReportResponse {
  // sustainability_report contains the sustainability report
  SustainabilityReport sustainability_report = 1 [
    (gogoproto.nullable) = false
  ];

  // risk_factors contains identified risk factors
  repeated RiskFactor risk_factors = 2 [
    (gogoproto.nullable) = false
  ];

  // recommendations contains recommendations
  repeated string recommendations = 3;
}

// QueryMaturityProjectionsRequest is request type for the Query/MaturityProjections RPC method
message QueryMaturityProjectionsRequest {
  // months_ahead for projections (default 12)
  uint32 months_ahead = 1;

  // scheme_id filters projections by scheme (optional)
  string scheme_id = 2;
}

// QueryMaturityProjectionsResponse is response type for the Query/MaturityProjections RPC method
message QueryMaturityProjectionsResponse {
  // maturity_projections contains monthly maturity projections
  repeated MonthlyMaturityProjection maturity_projections = 1 [
    (gogoproto.nullable) = false
  ];

  // total_projected_payouts
  cosmos.base.v1beta1.Coin total_projected_payouts = 2 [
    (gogoproto.nullable) = false
  ];

  // fund_adequacy_analysis
  FundAdequacyAnalysis fund_adequacy_analysis = 3 [
    (gogoproto.nullable) = false
  ];
}

// QueryWithdrawalRequestsRequest is request type for the Query/WithdrawalRequests RPC method
message QueryWithdrawalRequestsRequest {
  // participant_id filters by participant (optional)
  string participant_id = 1;

  // status filters by withdrawal status
  WithdrawalStatus status = 2;

  // pagination defines an optional pagination for the request
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryWithdrawalRequestsResponse is response type for the Query/WithdrawalRequests RPC method
message QueryWithdrawalRequestsResponse {
  // withdrawal_requests contains withdrawal requests
  repeated WithdrawalRequest withdrawal_requests = 1 [
    (gogoproto.nullable) = false
  ];

  // pagination defines the pagination in the response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;

  // total_withdrawal_amount
  cosmos.base.v1beta1.Coin total_withdrawal_amount = 3 [
    (gogoproto.nullable) = false
  ];

  // total_penalty_amount
  cosmos.base.v1beta1.Coin total_penalty_amount = 4 [
    (gogoproto.nullable) = false
  ];
}

// QueryKYCStatusRequest is request type for the Query/KYCStatus RPC method
message QueryKYCStatusRequest {
  // participant_id is the ID of the participant
  string participant_id = 1;
}

// QueryKYCStatusResponse is response type for the Query/KYCStatus RPC method
message QueryKYCStatusResponse {
  // kyc_status contains KYC status details
  KYCStatusDetails kyc_status = 1 [
    (gogoproto.nullable) = false
  ];

  // required_documents contains list of required documents
  repeated string required_documents = 2;

  // submitted_documents contains list of submitted documents
  repeated string submitted_documents = 3;

  // verification_progress contains verification progress
  string verification_progress = 4;
}

// QueryPenaltyCalculationRequest is request type for the Query/PenaltyCalculation RPC method
message QueryPenaltyCalculationRequest {
  // participant_id is the ID of the participant
  string participant_id = 1;

  // calculation_date is the date for calculation (optional, defaults to current)
  int64 calculation_date = 2;
}

// QueryPenaltyCalculationResponse is response type for the Query/PenaltyCalculation RPC method
message QueryPenaltyCalculationResponse {
  // penalty_calculation contains penalty details
  PenaltyCalculation penalty_calculation = 1 [
    (gogoproto.nullable) = false
  ];

  // payment_schedule contains payment schedule
  repeated PaymentSchedule payment_schedule = 2 [
    (gogoproto.nullable) = false
  ];

  // grace_period_info contains grace period information
  GracePeriodInfo grace_period_info = 3 [
    (gogoproto.nullable) = false
  ];
}

// QueryFundUtilizationRequest is request type for the Query/FundUtilization RPC method
message QueryFundUtilizationRequest {
  // scheme_id filters by scheme (optional)
  string scheme_id = 1;

  // time_period for utilization analysis
  string time_period = 2;
}

// QueryFundUtilizationResponse is response type for the Query/FundUtilization RPC method
message QueryFundUtilizationResponse {
  // fund_utilization contains fund utilization details
  FundUtilization fund_utilization = 1 [
    (gogoproto.nullable) = false
  ];

  // utilization_trends contains utilization trends
  repeated UtilizationTrend utilization_trends = 2 [
    (gogoproto.nullable) = false
  ];

  // efficiency_metrics contains efficiency metrics
  EfficiencyMetrics efficiency_metrics = 3 [
    (gogoproto.nullable) = false
  ];
}

// QueryRiskAssessmentRequest is request type for the Query/RiskAssessment RPC method
message QueryRiskAssessmentRequest {
  // assessment_type (scheme, participant, overall)
  string assessment_type = 1;

  // entity_id (scheme_id or participant_id based on type)
  string entity_id = 2;
}

// QueryRiskAssessmentResponse is response type for the Query/RiskAssessment RPC method
message QueryRiskAssessmentResponse {
  // risk_assessment contains risk assessment details
  RiskAssessment risk_assessment = 1 [
    (gogoproto.nullable) = false
  ];

  // risk_mitigation_strategies contains mitigation strategies
  repeated RiskMitigationStrategy risk_mitigation_strategies = 2 [
    (gogoproto.nullable) = false
  ];

  // risk_score overall risk score (0-100)
  uint32 risk_score = 3;
}

// QueryLoyaltyProgramRequest is request type for the Query/LoyaltyProgram RPC method
message QueryLoyaltyProgramRequest {
  // participant_id is the ID of the participant
  string participant_id = 1;
}

// QueryLoyaltyProgramResponse is response type for the Query/LoyaltyProgram RPC method
message QueryLoyaltyProgramResponse {
  // loyalty_program contains loyalty program details
  LoyaltyProgram loyalty_program = 1 [
    (gogoproto.nullable) = false
  ];

  // available_rewards contains available rewards
  repeated LoyaltyReward available_rewards = 2 [
    (gogoproto.nullable) = false
  ];

  // tier_benefits contains tier-specific benefits
  repeated TierBenefit tier_benefits = 3 [
    (gogoproto.nullable) = false
  ];
}

// Supporting message types for responses

// SchemeStatistics contains statistics for a scheme
message SchemeStatistics {
  // total_participants in the scheme
  uint64 total_participants = 1;

  // active_participants currently participating
  uint64 active_participants = 2;

  // matured_participants who completed the scheme
  uint64 matured_participants = 3;

  // total_contributions_received
  cosmos.base.v1beta1.Coin total_contributions_received = 4 [
    (gogoproto.nullable) = false
  ];

  // total_payouts_made
  cosmos.base.v1beta1.Coin total_payouts_made = 5 [
    (gogoproto.nullable) = false
  ];

  // average_performance_score
  string average_performance_score = 6;

  // scheme_health_score (0-100)
  uint32 scheme_health_score = 7;
}

// FundHealth contains fund health metrics
message FundHealth {
  // available_funds currently available
  cosmos.base.v1beta1.Coin available_funds = 1 [
    (gogoproto.nullable) = false
  ];

  // committed_funds for payouts
  cosmos.base.v1beta1.Coin committed_funds = 2 [
    (gogoproto.nullable) = false
  ];

  // utilization_ratio (0-1)
  string utilization_ratio = 3;

  // sustainability_score (0-100)
  uint32 sustainability_score = 4;

  // risk_level (low, medium, high)
  string risk_level = 5;
}

// MaturityProjection contains maturity projection details
message MaturityProjection {
  // participant_id
  string participant_id = 1;

  // projected_maturity_date
  int64 projected_maturity_date = 2;

  // projected_maturity_amount
  cosmos.base.v1beta1.Coin projected_maturity_amount = 3 [
    (gogoproto.nullable) = false
  ];

  // total_contributions_to_date
  cosmos.base.v1beta1.Coin total_contributions_to_date = 4 [
    (gogoproto.nullable) = false
  ];

  // remaining_contributions_needed
  cosmos.base.v1beta1.Coin remaining_contributions_needed = 5 [
    (gogoproto.nullable) = false
  ];

  // bonus_eligible indicates if eligible for bonus
  bool bonus_eligible = 6;

  // projected_bonus_amount
  cosmos.base.v1beta1.Coin projected_bonus_amount = 7 [
    (gogoproto.nullable) = false
  ];

  // completion_percentage (0-100)
  uint32 completion_percentage = 8;

  // months_remaining
  uint32 months_remaining = 9;
}

// PerformanceMetrics contains performance metrics
message PerformanceMetrics {
  // participant_id
  string participant_id = 1;

  // performance_score (0-100)
  uint32 performance_score = 2;

  // on_time_payment_ratio (0-1)
  string on_time_payment_ratio = 3;

  // cultural_engagement_score (0-100)
  uint32 cultural_engagement_score = 4;

  // loyalty_points_earned
  uint64 loyalty_points_earned = 5;

  // rank_in_scheme
  uint32 rank_in_scheme = 6;

  // percentile_rank (0-100)
  uint32 percentile_rank = 7;

  // improvement_trend (improving, stable, declining)
  string improvement_trend = 8;
}

// Additional supporting message types...
message SchemeSummary {
  string scheme_id = 1;
  string scheme_name = 2;
  uint64 total_participants = 3;
  cosmos.base.v1beta1.Coin total_contributions = 4 [(gogoproto.nullable) = false];
  string health_status = 5;
}

message ContributionBreakdown {
  cosmos.base.v1beta1.Coin base_contributions = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin bonus_contributions = 2 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin penalty_deductions = 3 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin net_contributions = 4 [(gogoproto.nullable) = false];
}

message BonusBreakdown {
  cosmos.base.v1beta1.Coin maturity_bonus = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin performance_bonus = 2 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin loyalty_bonus = 3 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin cultural_bonus = 4 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin total_bonus = 5 [(gogoproto.nullable) = false];
}

message WithdrawalCalculation {
  cosmos.base.v1beta1.Coin withdrawal_amount = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin penalty_amount = 2 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin net_amount = 3 [(gogoproto.nullable) = false];
  string penalty_percentage = 4;
  string withdrawal_impact_score = 5;
}

message PenaltyBreakdown {
  cosmos.base.v1beta1.Coin early_withdrawal_penalty = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin administrative_fee = 2 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin processing_fee = 3 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin total_penalty = 4 [(gogoproto.nullable) = false];
}

message MonthlyTrend {
  int64 month = 1;
  uint64 new_participants = 2;
  cosmos.base.v1beta1.Coin contributions_received = 3 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin payouts_made = 4 [(gogoproto.nullable) = false];
  string growth_rate = 5;
}

message SchemePerformance {
  string scheme_id = 1;
  string scheme_name = 2;
  uint32 performance_score = 3;
  cosmos.base.v1beta1.Coin total_contributions = 4 [(gogoproto.nullable) = false];
  uint64 participant_count = 5;
  string health_status = 6;
}

message ParticipationTrend {
  int64 period = 1;
  uint64 new_participants = 2;
  uint64 active_participants = 3;
  uint64 matured_participants = 4;
  uint64 withdrawn_participants = 5;
}

message ContributionTrend {
  int64 period = 1;
  cosmos.base.v1beta1.Coin total_contributions = 2 [(gogoproto.nullable) = false];
  uint64 on_time_contributions = 3;
  uint64 late_contributions = 4;
  cosmos.base.v1beta1.Coin penalty_collected = 5 [(gogoproto.nullable) = false];
}

message PerformanceRecord {
  int64 period = 1;
  uint32 performance_score = 2;
  string performance_category = 3;
  string improvement_area = 4;
}

message Benchmark {
  string benchmark_type = 1;
  string participant_value = 2;
  string average_value = 3;
  string percentile_rank = 4;
  string comparison_result = 5;
}

message ReferralReward {
  string reward_id = 1;
  string referred_participant_id = 2;
  cosmos.base.v1beta1.Coin reward_amount = 3 [(gogoproto.nullable) = false];
  int64 reward_date = 4;
  string reward_type = 5;
  string reward_status = 6;
}

message SustainabilityReport {
  string report_id = 1;
  int64 report_date = 2;
  string report_period = 3;
  uint32 sustainability_score = 4;
  cosmos.base.v1beta1.Coin total_assets = 5 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin total_liabilities = 6 [(gogoproto.nullable) = false];
  string fund_health_status = 7;
  repeated string key_metrics = 8;
}

message RiskFactor {
  string factor_id = 1;
  string factor_name = 2;
  string risk_level = 3;
  string description = 4;
  string mitigation_strategy = 5;
  uint32 impact_score = 6;
  uint32 likelihood_score = 7;
}

message MonthlyMaturityProjection {
  int64 month = 1;
  uint64 maturing_participants = 2;
  cosmos.base.v1beta1.Coin projected_payouts = 3 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin required_funds = 4 [(gogoproto.nullable) = false];
  string fund_adequacy_status = 5;
}

message FundAdequacyAnalysis {
  cosmos.base.v1beta1.Coin current_reserves = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin projected_requirements = 2 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin shortfall_amount = 3 [(gogoproto.nullable) = false];
  string adequacy_status = 4;
  repeated string recommendations = 5;
}

message KYCStatusDetails {
  string participant_id = 1;
  KYCStatus status = 2;
  int64 verification_date = 3;
  int64 expiry_date = 4;
  string verification_level = 5;
  string verification_notes = 6;
}

message PenaltyCalculation {
  string participant_id = 1;
  cosmos.base.v1beta1.Coin current_penalty = 2 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin projected_penalty = 3 [(gogoproto.nullable) = false];
  int64 calculation_date = 4;
  string penalty_reason = 5;
  repeated string penalty_components = 6;
}

message PaymentSchedule {
  int64 due_date = 1;
  cosmos.base.v1beta1.Coin amount_due = 2 [(gogoproto.nullable) = false];
  string payment_type = 3;
  string payment_status = 4;
  cosmos.base.v1beta1.Coin penalty_if_late = 5 [(gogoproto.nullable) = false];
}

message GracePeriodInfo {
  bool grace_period_active = 1;
  int64 grace_period_start = 2;
  int64 grace_period_end = 3;
  uint32 grace_period_days_remaining = 4;
  cosmos.base.v1beta1.Coin additional_penalty_after_grace = 5 [(gogoproto.nullable) = false];
}

message FundUtilization {
  cosmos.base.v1beta1.Coin total_allocated = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin currently_utilized = 2 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin available_balance = 3 [(gogoproto.nullable) = false];
  string utilization_percentage = 4;
  string efficiency_score = 5;
}

message UtilizationTrend {
  int64 period = 1;
  cosmos.base.v1beta1.Coin utilization_amount = 2 [(gogoproto.nullable) = false];
  string utilization_percentage = 3;
  string trend_direction = 4;
}

message EfficiencyMetrics {
  string cost_per_participant = 1;
  string payout_efficiency_ratio = 2;
  string administrative_cost_ratio = 3;
  string overall_efficiency_score = 4;
}

message RiskAssessment {
  string assessment_id = 1;
  string entity_type = 2;
  string entity_id = 3;
  uint32 risk_score = 4;
  string risk_level = 5;
  repeated string risk_factors = 6;
  string assessment_date = 7;
  string next_assessment_date = 8;
}

message RiskMitigationStrategy {
  string strategy_id = 1;
  string strategy_name = 2;
  string description = 3;
  string implementation_status = 4;
  uint32 effectiveness_score = 5;
  cosmos.base.v1beta1.Coin implementation_cost = 6 [(gogoproto.nullable) = false];
}

message LoyaltyProgram {
  string participant_id = 1;
  uint64 loyalty_points = 2;
  string loyalty_tier = 3;
  uint32 tier_progress = 4;
  int64 next_tier_requirement = 5;
  cosmos.base.v1beta1.Coin tier_benefits_value = 6 [(gogoproto.nullable) = false];
}

message LoyaltyReward {
  string reward_id = 1;
  string reward_name = 2;
  string reward_description = 3;
  uint64 points_required = 4;
  cosmos.base.v1beta1.Coin reward_value = 5 [(gogoproto.nullable) = false];
  string reward_type = 6;
  bool currently_available = 7;
}

message TierBenefit {
  string tier_name = 1;
  string benefit_type = 2;
  string benefit_description = 3;
  cosmos.base.v1beta1.Coin benefit_value = 4 [(gogoproto.nullable) = false];
  string benefit_duration = 5;
}