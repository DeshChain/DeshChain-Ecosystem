syntax = "proto3";
package deshchain.tradefinance;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/timestamp.proto";
import "deshchain/tradefinance/v1/tradefinance.proto";

option go_package = "github.com/deshchain/deshchain/x/tradefinance/types";

// Msg defines the trade finance Msg service
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // RegisterParty registers a new trade party
  rpc RegisterParty(MsgRegisterParty) returns (MsgRegisterPartyResponse);
  
  // IssueLc issues a new letter of credit
  rpc IssueLc(MsgIssueLc) returns (MsgIssueLcResponse);
  
  // AcceptLc accepts a letter of credit (by beneficiary)
  rpc AcceptLc(MsgAcceptLc) returns (MsgAcceptLcResponse);
  
  // SubmitDocuments submits trade documents
  rpc SubmitDocuments(MsgSubmitDocuments) returns (MsgSubmitDocumentsResponse);
  
  // VerifyDocument verifies a submitted document
  rpc VerifyDocument(MsgVerifyDocument) returns (MsgVerifyDocumentResponse);
  
  // RequestPayment requests payment under LC
  rpc RequestPayment(MsgRequestPayment) returns (MsgRequestPaymentResponse);
  
  // MakePayment makes payment for LC
  rpc MakePayment(MsgMakePayment) returns (MsgMakePaymentResponse);
  
  // AmendLc amends an existing LC
  rpc AmendLc(MsgAmendLc) returns (MsgAmendLcResponse);
  
  // CancelLc cancels an LC
  rpc CancelLc(MsgCancelLc) returns (MsgCancelLcResponse);
  
  // CreateInsurancePolicy creates insurance for LC
  rpc CreateInsurancePolicy(MsgCreateInsurancePolicy) returns (MsgCreateInsurancePolicyResponse);
  
  // UpdateShipment updates shipment tracking
  rpc UpdateShipment(MsgUpdateShipment) returns (MsgUpdateShipmentResponse);
  
  // UpdateParams updates module parameters (governance)
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgRegisterParty registers a new trade party
message MsgRegisterParty {
  option (cosmos.msg.v1.signer) = "creator";
  
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string party_type = 2;
  string name = 3;
  string address = 4;
  string country = 5;
  string tax_id = 6;
  string kyc_level = 7;
}

message MsgRegisterPartyResponse {
  string party_id = 1;
}

// MsgIssueLc issues a new letter of credit
message MsgIssueLc {
  option (cosmos.msg.v1.signer) = "issuing_bank";
  
  string issuing_bank = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string applicant_id = 2;
  string beneficiary_id = 3;
  string advising_bank_id = 4;
  cosmos.base.v1beta1.Coin amount = 5 [(gogoproto.nullable) = false];
  google.protobuf.Timestamp expiry_date = 6 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  google.protobuf.Timestamp latest_shipment_date = 7 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  string payment_terms = 8;
  uint32 deferred_payment_days = 9;
  string incoterms = 10;
  string port_of_loading = 11;
  string port_of_discharge = 12;
  bool partial_shipment_allowed = 13;
  bool transshipment_allowed = 14;
  string goods_description = 15;
  repeated string required_documents = 16;
  cosmos.base.v1beta1.Coin collateral = 17 [(gogoproto.nullable) = false];
}

message MsgIssueLcResponse {
  string lc_id = 1;
  string lc_number = 2;
}

// MsgAcceptLc accepts a letter of credit
message MsgAcceptLc {
  option (cosmos.msg.v1.signer) = "beneficiary";
  
  string beneficiary = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string lc_id = 2;
}

message MsgAcceptLcResponse {}

// MsgSubmitDocuments submits trade documents
message MsgSubmitDocuments {
  option (cosmos.msg.v1.signer) = "submitter";
  
  string submitter = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string lc_id = 2;
  repeated DocumentSubmission documents = 3;
}

message DocumentSubmission {
  string document_type = 1;
  string document_hash = 2; // IPFS hash
  string issuer = 3;
  google.protobuf.Timestamp issued_date = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message MsgSubmitDocumentsResponse {
  repeated string document_ids = 1;
}

// MsgVerifyDocument verifies a submitted document
message MsgVerifyDocument {
  option (cosmos.msg.v1.signer) = "verifier";
  
  string verifier = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string document_id = 2;
  bool approved = 3;
  string rejection_reason = 4;
}

message MsgVerifyDocumentResponse {}

// MsgRequestPayment requests payment under LC
message MsgRequestPayment {
  option (cosmos.msg.v1.signer) = "beneficiary";
  
  string beneficiary = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string lc_id = 2;
  cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];
}

message MsgRequestPaymentResponse {
  string payment_instruction_id = 1;
}

// MsgMakePayment makes payment for LC
message MsgMakePayment {
  option (cosmos.msg.v1.signer) = "payer";
  
  string payer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string payment_instruction_id = 2;
}

message MsgMakePaymentResponse {
  string transaction_hash = 1;
}

// MsgAmendLc amends an existing LC
message MsgAmendLc {
  option (cosmos.msg.v1.signer) = "issuing_bank";
  
  string issuing_bank = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string lc_id = 2;
  string amendment_type = 3; // "amount", "expiry", "terms", etc.
  string amendment_details = 4; // JSON encoded amendment details
}

message MsgAmendLcResponse {}

// MsgCancelLc cancels an LC
message MsgCancelLc {
  option (cosmos.msg.v1.signer) = "issuing_bank";
  
  string issuing_bank = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string lc_id = 2;
  string reason = 3;
}

message MsgCancelLcResponse {}

// MsgCreateInsurancePolicy creates insurance for LC
message MsgCreateInsurancePolicy {
  option (cosmos.msg.v1.signer) = "insurer";
  
  string insurer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string lc_id = 2;
  string policy_type = 3;
  cosmos.base.v1beta1.Coin coverage_amount = 4 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin premium = 5 [(gogoproto.nullable) = false];
  google.protobuf.Timestamp start_date = 6 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  google.protobuf.Timestamp end_date = 7 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  repeated string covered_risks = 8;
  string terms_ipfs_hash = 9;
}

message MsgCreateInsurancePolicyResponse {
  string policy_id = 1;
}

// MsgUpdateShipment updates shipment tracking
message MsgUpdateShipment {
  option (cosmos.msg.v1.signer) = "updater";
  
  string updater = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string lc_id = 2;
  string tracking_id = 3;
  string location = 4;
  string status = 5;
  string event_type = 6;
  string description = 7;
}

message MsgUpdateShipmentResponse {}

// MsgUpdateParams updates module parameters
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  Params params = 2 [(gogoproto.nullable) = false];
}

message MsgUpdateParamsResponse {}