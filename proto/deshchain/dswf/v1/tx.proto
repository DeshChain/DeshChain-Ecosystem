syntax = "proto3";
package deshchain.dswf.v1;

option go_package = "github.com/deshchain/deshchain/x/dswf/types";

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";
import "deshchain/dswf/v1/dswf.proto";

// Msg defines the DSWF Msg service
service Msg {
  option (cosmos.msg.v1.service) = true;

  // ProposeAllocation proposes a new allocation from DSWF
  rpc ProposeAllocation(MsgProposeAllocation) returns (MsgProposeAllocationResponse);
  
  // ApproveAllocation approves a proposed allocation
  rpc ApproveAllocation(MsgApproveAllocation) returns (MsgApproveAllocationResponse);
  
  // ExecuteDisbursement executes a scheduled disbursement
  rpc ExecuteDisbursement(MsgExecuteDisbursement) returns (MsgExecuteDisbursementResponse);
  
  // UpdateInvestmentStrategy updates the investment strategy
  rpc UpdateInvestmentStrategy(MsgUpdateInvestmentStrategy) returns (MsgUpdateInvestmentStrategyResponse);
  
  // RebalancePortfolio triggers portfolio rebalancing
  rpc RebalancePortfolio(MsgRebalancePortfolio) returns (MsgRebalancePortfolioResponse);
  
  // SubmitPerformanceMetrics submits performance metrics for an allocation
  rpc SubmitPerformanceMetrics(MsgSubmitPerformanceMetrics) returns (MsgSubmitPerformanceMetricsResponse);
  
  // UpdateParams updates the module parameters
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgProposeAllocation proposes a new fund allocation
message MsgProposeAllocation {
  option (cosmos.msg.v1.signer) = "proposer";
  option (amino.name) = "deshchain/dswf/ProposeAllocation";
  
  string proposer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string purpose = 2;
  string category = 3;
  cosmos.base.v1beta1.Coin amount = 4 [(gogoproto.nullable) = false];
  string recipient = 5 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated string expected_outcomes = 6;
  repeated DisbursementSchedule disbursement_schedule = 7 [(gogoproto.nullable) = false];
  string justification = 8;
}

message MsgProposeAllocationResponse {
  uint64 allocation_id = 1;
  uint64 proposal_id = 2;
}

// MsgApproveAllocation approves a proposed allocation
message MsgApproveAllocation {
  option (cosmos.msg.v1.signer) = "approver";
  option (amino.name) = "deshchain/dswf/ApproveAllocation";
  
  string approver = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 allocation_id = 2;
  bool approved = 3;
  string reason = 4;
}

message MsgApproveAllocationResponse {
  bool success = 1;
  string status = 2;
}

// MsgExecuteDisbursement executes a scheduled disbursement
message MsgExecuteDisbursement {
  option (cosmos.msg.v1.signer) = "executor";
  option (amino.name) = "deshchain/dswf/ExecuteDisbursement";
  
  string executor = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 allocation_id = 2;
  uint32 disbursement_index = 3;
  string milestone_proof = 4;
}

message MsgExecuteDisbursementResponse {
  bool success = 1;
  string tx_hash = 2;
  cosmos.base.v1beta1.Coin amount_disbursed = 3 [(gogoproto.nullable) = false];
}

// MsgUpdateInvestmentStrategy updates investment strategy
message MsgUpdateInvestmentStrategy {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "deshchain/dswf/UpdateInvestmentStrategy";
  
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  InvestmentStrategy new_strategy = 2 [(gogoproto.nullable) = false];
  string justification = 3;
}

message MsgUpdateInvestmentStrategyResponse {
  bool success = 1;
}

// MsgRebalancePortfolio triggers portfolio rebalancing
message MsgRebalancePortfolio {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "deshchain/dswf/RebalancePortfolio";
  
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string strategy_override = 2;
}

message MsgRebalancePortfolioResponse {
  bool success = 1;
  InvestmentPortfolio new_portfolio = 2 [(gogoproto.nullable) = false];
}

// MsgSubmitPerformanceMetrics submits performance metrics
message MsgSubmitPerformanceMetrics {
  option (cosmos.msg.v1.signer) = "submitter";
  option (amino.name) = "deshchain/dswf/SubmitPerformanceMetrics";
  
  string submitter = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 allocation_id = 2;
  repeated PerformanceMetric metrics = 3 [(gogoproto.nullable) = false];
  string report_period = 4;
  string supporting_documents = 5;
}

message MsgSubmitPerformanceMetricsResponse {
  bool success = 1;
  string evaluation = 2;
}

// MsgUpdateParams updates module parameters
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "deshchain/dswf/UpdateParams";
  
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  Params params = 2 [(gogoproto.nullable) = false];
}

message MsgUpdateParamsResponse {}