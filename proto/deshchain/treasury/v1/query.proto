syntax = "proto3";

package deshchain.treasury.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "deshchain/treasury/v1/treasury.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/deshchain/deshchain/x/treasury/types";

// Query defines the treasury Query service
service Query {
  // CommunityFundBalance queries the current community fund balance
  rpc CommunityFundBalance(QueryCommunityFundBalanceRequest) returns (QueryCommunityFundBalanceResponse) {
    option (google.api.http).get = "/deshchain/treasury/v1/community-fund/balance";
  }

  // DevelopmentFundBalance queries the current development fund balance
  rpc DevelopmentFundBalance(QueryDevelopmentFundBalanceRequest) returns (QueryDevelopmentFundBalanceResponse) {
    option (google.api.http).get = "/deshchain/treasury/v1/development-fund/balance";
  }

  // CommunityProposal queries a specific community fund proposal
  rpc CommunityProposal(QueryCommunityProposalRequest) returns (QueryCommunityProposalResponse) {
    option (google.api.http).get = "/deshchain/treasury/v1/community-fund/proposal/{proposal_id}";
  }

  // CommunityProposals queries all community fund proposals with pagination
  rpc CommunityProposals(QueryCommunityProposalsRequest) returns (QueryCommunityProposalsResponse) {
    option (google.api.http).get = "/deshchain/treasury/v1/community-fund/proposals";
  }

  // DevelopmentProposal queries a specific development fund proposal
  rpc DevelopmentProposal(QueryDevelopmentProposalRequest) returns (QueryDevelopmentProposalResponse) {
    option (google.api.http).get = "/deshchain/treasury/v1/development-fund/proposal/{proposal_id}";
  }

  // DevelopmentProposals queries all development fund proposals with pagination
  rpc DevelopmentProposals(QueryDevelopmentProposalsRequest) returns (QueryDevelopmentProposalsResponse) {
    option (google.api.http).get = "/deshchain/treasury/v1/development-fund/proposals";
  }

  // MultiSigGovernance queries multi-sig governance configuration
  rpc MultiSigGovernance(QueryMultiSigGovernanceRequest) returns (QueryMultiSigGovernanceResponse) {
    option (google.api.http).get = "/deshchain/treasury/v1/multisig/{governance_id}";
  }

  // ProposalSystem queries the community proposal system configuration
  rpc ProposalSystem(QueryProposalSystemRequest) returns (QueryProposalSystemResponse) {
    option (google.api.http).get = "/deshchain/treasury/v1/proposal-system";
  }

  // Dashboard queries the real-time dashboard data
  rpc Dashboard(QueryDashboardRequest) returns (QueryDashboardResponse) {
    option (google.api.http).get = "/deshchain/treasury/v1/dashboard";
  }

  // CommunityTransactions queries community fund transactions with pagination
  rpc CommunityTransactions(QueryCommunityTransactionsRequest) returns (QueryCommunityTransactionsResponse) {
    option (google.api.http).get = "/deshchain/treasury/v1/community-fund/transactions";
  }

  // DevelopmentTransactions queries development fund transactions with pagination
  rpc DevelopmentTransactions(QueryDevelopmentTransactionsRequest) returns (QueryDevelopmentTransactionsResponse) {
    option (google.api.http).get = "/deshchain/treasury/v1/development-fund/transactions";
  }

  // GovernancePhase queries the current governance phase
  rpc GovernancePhase(QueryGovernancePhaseRequest) returns (QueryGovernancePhaseResponse) {
    option (google.api.http).get = "/deshchain/treasury/v1/governance-phase";
  }

  // TransparencyReport queries transparency reports
  rpc TransparencyReport(QueryTransparencyReportRequest) returns (QueryTransparencyReportResponse) {
    option (google.api.http).get = "/deshchain/treasury/v1/transparency-report/{report_id}";
  }

  // Metrics queries treasury metrics
  rpc Metrics(QueryMetricsRequest) returns (QueryMetricsResponse) {
    option (google.api.http).get = "/deshchain/treasury/v1/metrics";
  }
}

// QueryCommunityFundBalanceRequest is the request type for Query/CommunityFundBalance
message QueryCommunityFundBalanceRequest {}

// QueryCommunityFundBalanceResponse is the response type for Query/CommunityFundBalance
message QueryCommunityFundBalanceResponse {
  CommunityFundBalance balance = 1 [(gogoproto.nullable) = false];
}

// QueryDevelopmentFundBalanceRequest is the request type for Query/DevelopmentFundBalance
message QueryDevelopmentFundBalanceRequest {}

// QueryDevelopmentFundBalanceResponse is the response type for Query/DevelopmentFundBalance
message QueryDevelopmentFundBalanceResponse {
  DevelopmentFundBalance balance = 1 [(gogoproto.nullable) = false];
}

// QueryCommunityProposalRequest is the request type for Query/CommunityProposal
message QueryCommunityProposalRequest {
  uint64 proposal_id = 1;
}

// QueryCommunityProposalResponse is the response type for Query/CommunityProposal
message QueryCommunityProposalResponse {
  CommunityFundProposal proposal = 1 [(gogoproto.nullable) = false];
}

// QueryCommunityProposalsRequest is the request type for Query/CommunityProposals
message QueryCommunityProposalsRequest {
  string status = 1; // optional filter by status
  string category = 2; // optional filter by category
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryCommunityProposalsResponse is the response type for Query/CommunityProposals
message QueryCommunityProposalsResponse {
  repeated CommunityFundProposal proposals = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDevelopmentProposalRequest is the request type for Query/DevelopmentProposal
message QueryDevelopmentProposalRequest {
  uint64 proposal_id = 1;
}

// QueryDevelopmentProposalResponse is the response type for Query/DevelopmentProposal
message QueryDevelopmentProposalResponse {
  DevelopmentFundProposal proposal = 1 [(gogoproto.nullable) = false];
}

// QueryDevelopmentProposalsRequest is the request type for Query/DevelopmentProposals
message QueryDevelopmentProposalsRequest {
  string status = 1; // optional filter by status
  string category = 2; // optional filter by category
  string priority = 3; // optional filter by priority
  cosmos.base.query.v1beta1.PageRequest pagination = 4;
}

// QueryDevelopmentProposalsResponse is the response type for Query/DevelopmentProposals
message QueryDevelopmentProposalsResponse {
  repeated DevelopmentFundProposal proposals = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryMultiSigGovernanceRequest is the request type for Query/MultiSigGovernance
message QueryMultiSigGovernanceRequest {
  uint64 governance_id = 1;
}

// QueryMultiSigGovernanceResponse is the response type for Query/MultiSigGovernance
message QueryMultiSigGovernanceResponse {
  MultiSigGovernance governance = 1 [(gogoproto.nullable) = false];
}

// MultiSigGovernance represents the multi-signature governance system (simplified for proto)
message MultiSigGovernance {
  uint64 id = 1;
  string name = 2;
  string description = 3;
  string type = 4;
  uint32 threshold = 5;
  uint32 total_signers = 6;
  uint64 active_proposals = 7;
  uint64 completed_proposals = 8;
  google.protobuf.Timestamp created_at = 9 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  google.protobuf.Timestamp updated_at = 10 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  string status = 11;
}

// QueryProposalSystemRequest is the request type for Query/ProposalSystem
message QueryProposalSystemRequest {}

// QueryProposalSystemResponse is the response type for Query/ProposalSystem
message QueryProposalSystemResponse {
  CommunityProposalSystem system = 1 [(gogoproto.nullable) = false];
}

// CommunityProposalSystem represents the phased community proposal system (simplified for proto)
message CommunityProposalSystem {
  uint64 id = 1;
  string name = 2;
  string description = 3;
  google.protobuf.Timestamp launch_date = 4 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  google.protobuf.Timestamp activation_date = 5 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  string current_phase = 6;
  string status = 7;
}

// QueryDashboardRequest is the request type for Query/Dashboard
message QueryDashboardRequest {}

// QueryDashboardResponse is the response type for Query/Dashboard
message QueryDashboardResponse {
  RealTimeDashboard dashboard = 1 [(gogoproto.nullable) = false];
}

// RealTimeDashboard represents the real-time transparency dashboard (simplified for proto)
message RealTimeDashboard {
  google.protobuf.Timestamp last_updated = 1 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  CommunityFundMetrics community_fund = 2 [(gogoproto.nullable) = false];
  DevelopmentFundMetrics development_fund = 3 [(gogoproto.nullable) = false];
  OverallFundMetrics overall_metrics = 4 [(gogoproto.nullable) = false];
  uint32 transparency_score = 5;
  uint32 compliance_score = 6;
  string status = 7;
}

// CommunityFundMetrics represents real-time community fund metrics
message CommunityFundMetrics {
  cosmos.base.v1beta1.Coin total_allocation = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin current_balance = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin allocated_amount = 3 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin spent_amount = 4 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin remaining_amount = 5 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  uint64 active_proposals = 6;
  uint64 completed_proposals = 7;
  google.protobuf.Timestamp last_updated = 8 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}

// DevelopmentFundMetrics represents real-time development fund metrics
message DevelopmentFundMetrics {
  cosmos.base.v1beta1.Coin total_allocation = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin current_balance = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin allocated_amount = 3 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin spent_amount = 4 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin remaining_amount = 5 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  uint64 active_projects = 6;
  uint64 completed_projects = 7;
  google.protobuf.Timestamp last_updated = 8 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}

// OverallFundMetrics represents overall fund metrics
message OverallFundMetrics {
  cosmos.base.v1beta1.Coin total_funds = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin total_allocated = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin total_spent = 3 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin total_remaining = 4 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  uint32 overall_transparency = 5;
  uint32 overall_compliance = 6;
  google.protobuf.Timestamp last_updated = 7 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}

// QueryCommunityTransactionsRequest is the request type for Query/CommunityTransactions
message QueryCommunityTransactionsRequest {
  string status = 1; // optional filter by status
  string type = 2; // optional filter by type
  string category = 3; // optional filter by category
  cosmos.base.query.v1beta1.PageRequest pagination = 4;
}

// QueryCommunityTransactionsResponse is the response type for Query/CommunityTransactions
message QueryCommunityTransactionsResponse {
  repeated CommunityFundTransaction transactions = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDevelopmentTransactionsRequest is the request type for Query/DevelopmentTransactions
message QueryDevelopmentTransactionsRequest {
  string status = 1; // optional filter by status
  string type = 2; // optional filter by type
  string category = 3; // optional filter by category
  cosmos.base.query.v1beta1.PageRequest pagination = 4;
}

// QueryDevelopmentTransactionsResponse is the response type for Query/DevelopmentTransactions
message QueryDevelopmentTransactionsResponse {
  repeated DevelopmentFundTransaction transactions = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryGovernancePhaseRequest is the request type for Query/GovernancePhase
message QueryGovernancePhaseRequest {}

// QueryGovernancePhaseResponse is the response type for Query/GovernancePhase
message QueryGovernancePhaseResponse {
  string current_phase = 1;
  google.protobuf.Timestamp phase_start_date = 2 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  google.protobuf.Timestamp next_phase_date = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  string next_phase = 4;
  PhaseDetails phase_details = 5 [(gogoproto.nullable) = false];
}

// PhaseDetails represents details about the current governance phase
message PhaseDetails {
  string description = 1;
  uint32 founder_allocation_power = 2;
  uint32 community_proposal_power = 3;
  bool community_voting_enabled = 4;
  bool founder_veto_enabled = 5;
  repeated string allowed_proposal_types = 6;
}

// QueryTransparencyReportRequest is the request type for Query/TransparencyReport
message QueryTransparencyReportRequest {
  uint64 report_id = 1;
}

// QueryTransparencyReportResponse is the response type for Query/TransparencyReport
message QueryTransparencyReportResponse {
  TransparencyReport report = 1 [(gogoproto.nullable) = false];
}

// TransparencyReport represents a transparency report (simplified for proto)
message TransparencyReport {
  uint64 report_id = 1;
  google.protobuf.Timestamp start_date = 2 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  google.protobuf.Timestamp end_date = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  cosmos.base.v1beta1.Coin total_funds = 4 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin allocated_funds = 5 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin spent_funds = 6 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin remaining_funds = 7 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  string audit_status = 8;
  google.protobuf.Timestamp next_report_date = 9 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}

// QueryMetricsRequest is the request type for Query/Metrics
message QueryMetricsRequest {
  string metric_type = 1; // community, development, overall
  string period = 2; // daily, weekly, monthly, yearly
}

// QueryMetricsResponse is the response type for Query/Metrics
message QueryMetricsResponse {
  TreasuryMetrics metrics = 1 [(gogoproto.nullable) = false];
}

// TreasuryMetrics represents treasury metrics
message TreasuryMetrics {
  string period = 1;
  cosmos.base.v1beta1.Coin total_inflow = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  cosmos.base.v1beta1.Coin total_outflow = 3 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  uint64 proposals_submitted = 4;
  uint64 proposals_approved = 5;
  uint64 proposals_rejected = 6;
  uint64 proposals_executed = 7;
  string allocation_efficiency = 8;
  string spending_efficiency = 9;
  uint32 transparency_score = 10;
  uint32 compliance_score = 11;
  google.protobuf.Timestamp calculated_at = 12 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}