syntax = "proto3";

package deshchain.namo.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";

option go_package = "github.com/deshchain/deshchain/x/namo/types";

// TokenSupply defines the total token supply and distribution
message TokenSupply {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // total_supply is the total number of NAMO tokens
  string total_supply = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // public_sale_allocation is 25% of total supply
  string public_sale_allocation = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // liquidity_allocation is 15% of total supply
  string liquidity_allocation = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // team_allocation is 20% of total supply with 24-month vesting
  string team_allocation = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // development_allocation is 15% of total supply
  string development_allocation = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // community_allocation is 10% of total supply over 60 months
  string community_allocation = 6 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // dao_treasury_allocation is 5% of total supply
  string dao_treasury_allocation = 7 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // initial_burn_allocation is 10% of total supply
  string initial_burn_allocation = 8 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

// VestingSchedule defines the vesting schedule for team tokens
message VestingSchedule {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // recipient is the address receiving the vested tokens
  string recipient = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // total_amount is the total amount to be vested
  string total_amount = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // vesting_period_months is the total vesting period in months
  int64 vesting_period_months = 3;

  // start_time is the Unix timestamp when vesting begins
  int64 start_time = 4;

  // cliff_period_months is the cliff period in months
  int64 cliff_period_months = 5;

  // vested_amount is the amount already vested
  string vested_amount = 6 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

// TokenDistributionEvent represents a token distribution event
message TokenDistributionEvent {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // event_type describes the type of distribution
  string event_type = 1;

  // recipient is the address receiving the tokens
  string recipient = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // amount is the amount of tokens distributed
  cosmos.base.v1beta1.Coin amount = 3 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // timestamp is when the distribution occurred
  int64 timestamp = 4;

  // description provides additional context
  string description = 5;
}

// Params defines the parameters for the NAMO token module
message Params {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;
  option (amino.name) = "deshchain/x/namo/Params";

  // token_denom is the denomination of the NAMO token
  string token_denom = 1;

  // enable_vesting enables or disables vesting functionality
  bool enable_vesting = 2;

  // enable_burning enables or disables token burning
  bool enable_burning = 3;

  // min_burn_amount is the minimum amount that can be burned
  string min_burn_amount = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}