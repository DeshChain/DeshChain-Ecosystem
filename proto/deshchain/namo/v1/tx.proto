syntax = "proto3";

package deshchain.namo.v1;

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "deshchain/namo/v1/namo.proto";
import "amino/amino.proto";

option go_package = "github.com/deshchain/deshchain/x/namo/types";

// Msg defines the NAMO module Msg service
service Msg {
  option (cosmos.msg.v1.service) = true;

  // BurnTokens burns NAMO tokens
  rpc BurnTokens(MsgBurnTokens) returns (MsgBurnTokensResponse);

  // CreateVestingSchedule creates a new vesting schedule
  rpc CreateVestingSchedule(MsgCreateVestingSchedule) returns (MsgCreateVestingScheduleResponse);

  // ClaimVestedTokens claims vested tokens
  rpc ClaimVestedTokens(MsgClaimVestedTokens) returns (MsgClaimVestedTokensResponse);

  // UpdateParams updates the module parameters
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgBurnTokens defines a message to burn NAMO tokens
message MsgBurnTokens {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "deshchain/MsgBurnTokens";

  // sender is the address burning the tokens
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // amount is the amount of tokens to burn
  cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgBurnTokensResponse defines the response to MsgBurnTokens
message MsgBurnTokensResponse {
  // burned_amount is the actual amount burned
  cosmos.base.v1beta1.Coin burned_amount = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgCreateVestingSchedule defines a message to create a vesting schedule
message MsgCreateVestingSchedule {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "deshchain/MsgCreateVestingSchedule";

  // authority is the address with permission to create vesting schedules
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // recipient is the address that will receive the vested tokens
  string recipient = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // total_amount is the total amount to be vested
  string total_amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // vesting_period_months is the total vesting period in months
  int64 vesting_period_months = 4;

  // cliff_period_months is the cliff period in months
  int64 cliff_period_months = 5;
}

// MsgCreateVestingScheduleResponse defines the response to MsgCreateVestingSchedule
message MsgCreateVestingScheduleResponse {
  // schedule_id is the ID of the created vesting schedule
  uint64 schedule_id = 1;
}

// MsgClaimVestedTokens defines a message to claim vested tokens
message MsgClaimVestedTokens {
  option (cosmos.msg.v1.signer) = "recipient";
  option (amino.name) = "deshchain/MsgClaimVestedTokens";

  // recipient is the address claiming the vested tokens
  string recipient = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // schedule_id is the ID of the vesting schedule
  uint64 schedule_id = 2;
}

// MsgClaimVestedTokensResponse defines the response to MsgClaimVestedTokens
message MsgClaimVestedTokensResponse {
  // claimed_amount is the amount of tokens claimed
  cosmos.base.v1beta1.Coin claimed_amount = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParams defines a message to update the module parameters
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "deshchain/MsgUpdateParams";

  // authority is the address with permission to update parameters
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params are the new parameters
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response to MsgUpdateParams
message MsgUpdateParamsResponse {}