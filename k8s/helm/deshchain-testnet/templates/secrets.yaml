# Database Connection Secret
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "deshchain-testnet.fullname" . }}-database
  labels:
    {{- include "deshchain-testnet.labels" . | nindent 4 }}
type: Opaque
data:
  database-url: {{ printf "postgresql://%s:%s@%s-postgresql:5432/%s" .Values.postgresql.auth.username .Values.postgresql.auth.password (include "deshchain-testnet.fullname" .) .Values.postgresql.auth.database | b64enc }}

---
# Redis Connection Secret
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "deshchain-testnet.fullname" . }}-redis
  labels:
    {{- include "deshchain-testnet.labels" . | nindent 4 }}
type: Opaque
data:
  redis-url: {{ printf "redis://:%s@%s-redis-master:6379" .Values.redis.auth.password (include "deshchain-testnet.fullname" .) | b64enc }}

---
# Validator Keys Secret (must be created manually before deployment)
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "deshchain-testnet.validatorKeysSecretName" . }}
  labels:
    {{- include "deshchain-testnet.labels" . | nindent 4 }}
  annotations:
    helm.sh/resource-policy: keep
type: Opaque
data:
  # Base64 encoded validator private keys
  # These MUST be created manually before deployment
  # Example:
  # priv_validator_key.json: <base64-encoded-json>
  priv_validator_key.json: ""

---
# Faucet Keys Secret (must be created manually before deployment)
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "deshchain-testnet.faucetKeysSecretName" . }}
  labels:
    {{- include "deshchain-testnet.labels" . | nindent 4 }}
  annotations:
    helm.sh/resource-policy: keep
type: Opaque
data:
  # Base64 encoded faucet mnemonic
  # This MUST be created manually before deployment
  # Example:
  # mnemonic: <base64-encoded-mnemonic>
  mnemonic: ""

---
# TLS Certificates Secret (managed by cert-manager)
{{- if .Values.ingress.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.ingress.tls[0].secretName }}
  labels:
    {{- include "deshchain-testnet.labels" . | nindent 4 }}
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
type: kubernetes.io/tls
data:
  # TLS certificate and key will be automatically populated by cert-manager
  tls.crt: ""
  tls.key: ""
{{- end }}